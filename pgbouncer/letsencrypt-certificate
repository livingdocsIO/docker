#!/bin/bash
set -e
export LETSENCRYPT_DIR="${LETSENCRYPT_DIR:-/etc/letsencrypt}"
export DESTINATION_DIR="${DESTINATION_DIR:-/etc/pgbouncer}"
function log () { >&2 echo $@; }
function fatal () { >&2 echo $@; exit 1; }

function movecert () {
  log Move certificates
  cd $LETSENCRYPT_DIR/certificates/
  cp $LETSENCRYPT_DOMAIN.crt $DESTINATION_DIR/certificate.crt
  cp $LETSENCRYPT_DOMAIN.key $DESTINATION_DIR/certificate.key
  chown pgbouncer:pgbouncer $DESTINATION_DIR/certificate.key $DESTINATION_DIR/certificate.crt
  chmod 600 $DESTINATION_DIR/certificate.key $DESTINATION_DIR/certificate.crt
}

function createcert () {
  [[ -z "$AWS_REGION" ]] && fatal "The environment variable 'AWS_REGION' is mandatory. It wasn't defined"
  [[ -z "$AWS_ACCESS_KEY_ID" ]] && fatal "The environment variable 'AWS_ACCESS_KEY_ID' is mandatory. It wasn't defined"
  [[ -z "$AWS_SECRET_ACCESS_KEY" ]] && fatal "The environment variable 'AWS_SECRET_ACCESS_KEY' is mandatory. It wasn't defined"
  [[ -z "$LETSENCRYPT_EMAIL" ]] && fatal "The environment variable 'LETSENCRYPT_EMAIL' is mandatory. It wasn't defined"
  [[ -z "$LETSENCRYPT_DOMAIN" ]] && fatal "The environment variable 'LETSENCRYPT_DOMAIN' is mandatory. It wasn't defined"

  if test -f "$LETSENCRYPT_DIR/certificates/$LETSENCRYPT_DOMAIN.json"; then
    log "Generate certificate using 'lego -d $LETSENCRYPT_DOMAIN renew'"
    lego -a --path $LETSENCRYPT_DIR -m $LETSENCRYPT_EMAIL -d $LETSENCRYPT_DOMAIN --dns='route53' renew
  else
    log "Generate certificate using 'lego -d $LETSENCRYPT_DOMAIN run'"
    lego -a --path $LETSENCRYPT_DIR -m $LETSENCRYPT_EMAIL -d $LETSENCRYPT_DOMAIN --dns='route53' run
  fi
}

function reloadconfig () {
  [[ -z "$PGHOST" ]] && fatal "The environment variable 'PGHOST' is mandatory. It wasn't defined"
  [[ -z "$PGUSER" ]] && fatal "The environment variable 'PGUSER' is mandatory. It wasn't defined"

  log Reload pgbouncer
  psql pgbouncer -c RELOAD > /dev/null
}

if [ "$1" == 'only' ]; then
  createcert
  movecert
  exit 0
elif [ "$1" == 'live' ]; then
  createcert
  movecert
  reloadconfig
  exit 0
elif [ "$1" == 'reload' ]; then
  movecert
  reloadconfig
  exit 0
fi

>&2 echo Command did not match any pattern: "$@"
>&2 echo Please use 'only', 'live', 'reload'
